# -*- coding: utf-8 -*-
"""Klasifikasi Eselon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L73uOL2yG5-s9Up4VA-_a5AQTotNkRsE
"""

# ============================
# Inferensi Eselon dari Jabatan
# ============================

import pandas as pd, re, os

# --- SETUP PATH FILE ---
PATH_XLSX = "rekap_pegawai.xlsx"  # ganti sesuai file Anda
SHEET_NAME = None                          # None = sheet pertama
PATH_CSV  = None                           # isi jika pakai CSV

# --- NAMA KOLOM DI DATA ---
COL_OPD    = "satuan_kerja_nama"
COL_JAB    = "jabatan_nama"
COL_JJENIS = "jabatan_jenis"

# --- LOAD DATA ---
def load_df():
    if PATH_CSV and os.path.exists(PATH_CSV):
        df = pd.read_csv(PATH_CSV)
        print(f"Loaded CSV: {PATH_CSV} | rows={len(df)}")
        return df
    elif os.path.exists(PATH_XLSX):
        xl = pd.ExcelFile(PATH_XLSX)
        sheet = SHEET_NAME or xl.sheet_names[0]
        df = pd.read_excel(PATH_XLSX, sheet_name=sheet)
        print(f"Loaded Excel: {PATH_XLSX} | sheet={sheet} | rows={len(df)}")
        return df
    else:
        raise FileNotFoundError("Upload file Excel/CSV ke Colab dan sesuaikan PATH_XLSX/PATH_CSV.")

df = load_df()

# ============================
# Normalisasi teks
# ============================
def norm_space(x):
    if pd.isna(x): return None
    x = str(x).strip()
    x = re.sub(r"\s+", " ", x)
    return x.upper() if x else None

df[COL_JAB] = df[COL_JAB].map(norm_space)
df[COL_JJENIS] = df[COL_JJENIS].map(norm_space)

# ============================
# RULESET: Jabatan â†’ Eselon
# ============================
rules = [
    # Eselon II
    (["KEPALA DINAS","KEPALA BADAN","SEKDA","SEKRETARIS DAERAH",
      "INSPEKTUR","DIREKTUR","STAF AHLI"], "II"),
    # Eselon III
    (["KEPALA BIDANG","KABID","CAMAT","KABAG","SEKRETARIS DINAS",
      "SEKRETARIS BADAN","SEKRETARIS KECAMATAN"], "III"),
    # Eselon IV
    (["KEPALA SEKSI","KASI","KEPALA SUB BAGIAN","KASUBAG",
      "KEPALA SUB BIDANG","KASUBBID","LURAH","KAUR"], "IV"),
]


def infer_eselon(jabatan, jenis):
    if not jabatan and not jenis:
        return "Non-Eselon", "no_data"

    # Fungsional
    if jenis and any(k in jenis for k in ["JFU","JFT","FUNGSIONAL"]):
        return "Non-Eselon", "fungsional"

    # Cek rules
    for keywords, es in rules:
        for kw in keywords:
            if jabatan and kw in jabatan:
                return es, f"match:{kw}"

    # Ambigu: ada kata kepala/sekretaris/kabid/kasi/kasub tanpa detail
    if jabatan and re.search(r"\b(KEPALA|SEKRETARIS|KABAG|KABID|KASI|KASUB)\b", jabatan):
        return "III/IV", "ambiguous_structural"

    # Default
    return "Non-Eselon", "default"

df[["eselon","eselon_reason"]] = df.apply(
    lambda r: pd.Series(infer_eselon(r[COL_JAB], r[COL_JJENIS])), axis=1
)

# ============================
# AUDIT & RINGKASAN
# ============================
print("== Distribusi Eselon ==")
print(df["eselon"].value_counts(dropna=False))

print("\n== Contoh data ==")
print(df[[COL_OPD, COL_JAB, COL_JJENIS, "eselon","eselon_reason"]].head(15).to_string(index=False))

# Simpan hasil
out_path = "rekap_with_eselon.csv"
df.to_csv(out_path, index=False)
print(f"\nFile hasil disimpan ke: {out_path}")